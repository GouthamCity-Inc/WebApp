name: packer-build

on:
  pull_request:
    branches:
      - main
    types:
      - closed
jobs:
  packer:
    runs-on: ubuntu-latest
    name: packer-build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean build -xTest

      - name: install mariadb
        uses: getong/mariadb-action@v1.1
        with:
          host port: 3306 # Optional, default value is 3306. The port of host
          container port: 3306 # Optional, default value is 3306. The port of container
          mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
          mysql database: 'db' # Optional, default value is "test". The specified database which will be create
          mysql root password: ${{ secrets.DB_ROOT_PASSWORD }} # Required if "mysql user" is empty, default is empty. The root password of the MariaDB. Can use secrets, too
          mysql user: ${{ secrets.DB_USER }} # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
          mysql password: ${{ secrets.DB_USER_PASSWORD }}

      - name: Run karate test
        run: ./gradlew test
        env:
          ACTIONS_RUNNER_DEBUG: ${{ secrets.ACTIONS_RUNNER_DEBUG }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_USER_PASSWORD }}
          AWS_REGION: "us-east-1"

      - name: setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main

      - name: Run `packer init`
        run: packer init ./build-ami.pkr.hcl

      - name: Run `packer build`
        run: packer build -var-file=./packer/build-ami.pkrvars.hcl  ./packer/build-ami.pkr.hcl

  refresh-instances:
    needs: packer
    runs-on: ubuntu-latest
    name: refresh instances with the latest AMI
    env:
        EC2_LAUNCH_TEMPLATE: ${{ vars.EC2_LAUNCH_TEMPLATE }}
        EC2_AUTOSCALING_GROUP: ${{ vars.EC2_AUTOSCALING_GROUP }}
    steps:
      - name: setup AWS demo account credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET }}
          aws-region: us-east-1
      - name: get the latest AMI id
        run: |
          AMI_ID=$(aws ec2 describe-images \
          --filters "Name=name,Values=csye-6225*" \
          --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" \
          --output text)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
      - name: print env variables
        run: |
          echo "EC2_LAUNCH_TEMPLATE: $EC2_LAUNCH_TEMPLATE"
          echo "EC2_AUTOSCALING_GROUP: $EC2_AUTOSCALING_GROUP"
          echo "AMI_ID: $AMI_ID"
      - name: create new launch template version
        run: |
          aws ec2 create-launch-template-version \
          --launch-template-name $EC2_LAUNCH_TEMPLATE \
          --launch-template-data ImageId=$AMI_ID \
          --source-version 1
      - name: refresh instances
        run: |
          aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $EC2_AUTOSCALING_GROUP \
      - name: wait on instance refresh completion
        run: |
          asg_name="<your-auto-scaling-group-name>"
          while true; do
              refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ env.EC2_AUTOSCALING_GROUP }} --query 'InstanceRefreshes[0].Status' --output text)
          
              if [ "$refresh_status" == "Successful" ]; then
                  echo "Instance refresh completed successfully."
                  break
              elif [ "$refresh_status" == "Failed" ]; then
                  echo "Instance refresh failed."
                  exit 1
              elif [ "$refresh_status" == "Cancelled" ]; then
                  echo "Instance refresh cancelled."
                  exit 1
              else
                  echo "Instance refresh in progress..."
                  sleep 30
              fi
          done